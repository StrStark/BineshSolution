// <auto-generated />
using System;
using DataBaseManager.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataBaseManager.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Shared.Models.DataBaseModels.Account.Account", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("Article")
                        .HasColumnType("integer");

                    b.Property<string>("ArticleDescription")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<long>("Credit")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Debit")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DocDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GroupType")
                        .HasColumnType("integer");

                    b.Property<int>("GroupTypeDesc")
                        .HasColumnType("integer");

                    b.Property<bool>("IsLayerOne")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("OperationName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("SeriesNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("SumCredit")
                        .HasColumnType("bigint");

                    b.Property<long>("SumDebit")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("chequeCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("inflection")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("Name");

                    b.HasIndex("ParentId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Costumers.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Desc")
                        .HasColumnType("text");

                    b.Property<float>("PaymentReliability")
                        .HasColumnType("real");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Costumers.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Family")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Costumers.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CityRegion")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Mahale")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Regions", (string)null);
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Inventory.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<bool>("ActiveInReceiptRegistration")
                        .HasColumnType("boolean");

                    b.Property<bool>("ActiveInReports")
                        .HasColumnType("boolean");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("AffectProductionRequestBySalesOrder")
                        .HasColumnType("boolean");

                    b.Property<bool>("AffectStockCalculation")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowNegativeStock")
                        .HasColumnType("boolean");

                    b.Property<bool>("BarcodeEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("Identifiable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMonetary")
                        .HasColumnType("boolean");

                    b.Property<bool>("LimitByAccountAndDocumentType")
                        .HasColumnType("boolean");

                    b.Property<bool>("LimitByMarketer")
                        .HasColumnType("boolean");

                    b.Property<string>("Manager")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("UseAverageOrFIFOFromYearStart")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Inventory.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<float>("Cost")
                        .HasColumnType("real");

                    b.Property<DateTime>("EnteryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExitDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ProductDesc")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ProductDesc2")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ProductDescBarcode")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ProductDescLatin")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("ProductIsActive")
                        .HasColumnType("boolean");

                    b.Property<float>("SellingPrice")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("Products");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Sales.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CounterpartyId")
                        .HasColumnType("uuid");

                    b.Property<int>("DocNumber")
                        .HasColumnType("integer");

                    b.Property<bool>("Request")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("invoice")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CounterpartyId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Sales.Price", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<long>("Fee")
                        .HasColumnType("bigint");

                    b.Property<long>("Receipt")
                        .HasColumnType("bigint");

                    b.Property<long>("Voucher")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Sales.Sales", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("DeliveredQuantity")
                        .HasColumnType("real");

                    b.Property<float>("Incoming")
                        .HasColumnType("real");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<float>("Outgoing")
                        .HasColumnType("real");

                    b.Property<Guid>("PriceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("RequestNumber")
                        .HasColumnType("integer");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.HasIndex("PriceId")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Inventory.Carpet", b =>
                {
                    b.HasBaseType("Shared.Models.DataBaseModels.Inventory.Product");

                    b.Property<string>("BorderColor")
                        .HasColumnType("text");

                    b.Property<string>("Buyer")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<int>("ColorCount")
                        .HasColumnType("integer");

                    b.Property<string>("ColorPalette")
                        .HasColumnType("text");

                    b.Property<string>("Density")
                        .HasColumnType("text");

                    b.Property<string>("DesignCode")
                        .HasColumnType("text");

                    b.Property<string>("DesignName")
                        .HasColumnType("text");

                    b.Property<string>("DeviceNumber")
                        .HasColumnType("text");

                    b.Property<string>("Grade")
                        .HasColumnType("text");

                    b.Property<string>("ProjectName")
                        .HasColumnType("text");

                    b.Property<string>("Shoulder")
                        .HasColumnType("text");

                    b.Property<string>("Size")
                        .HasColumnType("text");

                    b.Property<string>("WeavePattern")
                        .HasColumnType("text");

                    b.Property<string>("WeaveType")
                        .HasColumnType("text");

                    b.Property<string>("genus")
                        .HasColumnType("text");

                    b.ToTable("Carpets", (string)null);
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Inventory.RawMaterial", b =>
                {
                    b.HasBaseType("Shared.Models.DataBaseModels.Inventory.Product");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<string>("DeviceUsage")
                        .HasColumnType("text");

                    b.Property<string>("Extra1")
                        .HasColumnType("text");

                    b.Property<string>("Extra2")
                        .HasColumnType("text");

                    b.Property<string>("Extra3")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<string>("PackageType")
                        .HasColumnType("text");

                    b.Property<string>("ProjectName")
                        .HasColumnType("text");

                    b.Property<string>("Serial")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.ToTable("RawMaterials", (string)null);
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Inventory.Rug", b =>
                {
                    b.HasBaseType("Shared.Models.DataBaseModels.Inventory.Product");

                    b.Property<string>("Buyer")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<int>("ColorCount")
                        .HasColumnType("integer");

                    b.Property<string>("Design")
                        .HasColumnType("text");

                    b.Property<string>("DesignCode")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Size")
                        .HasColumnType("text");

                    b.Property<string>("WeaveType")
                        .HasColumnType("text");

                    b.Property<string>("Width")
                        .HasColumnType("text");

                    b.ToTable("Rugs", (string)null);
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Account.Account", b =>
                {
                    b.HasOne("Shared.Models.DataBaseModels.Account.Account", "Parent")
                        .WithMany("SubAccounts")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Costumers.Customer", b =>
                {
                    b.HasOne("Shared.Models.DataBaseModels.Costumers.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Costumers.Person", b =>
                {
                    b.HasOne("Shared.Models.DataBaseModels.Costumers.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Inventory.Inventory", b =>
                {
                    b.HasOne("Shared.Models.DataBaseModels.Account.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Inventory.Product", b =>
                {
                    b.HasOne("Shared.Models.DataBaseModels.Inventory.Inventory", "Inventory")
                        .WithMany("Products")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Sales.Invoice", b =>
                {
                    b.HasOne("Shared.Models.DataBaseModels.Costumers.Customer", "Counterparty")
                        .WithMany()
                        .HasForeignKey("CounterpartyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Counterparty");
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Sales.Sales", b =>
                {
                    b.HasOne("Shared.Models.DataBaseModels.Sales.Invoice", "Invoice")
                        .WithOne()
                        .HasForeignKey("Shared.Models.DataBaseModels.Sales.Sales", "InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.Models.DataBaseModels.Sales.Price", "Price")
                        .WithOne()
                        .HasForeignKey("Shared.Models.DataBaseModels.Sales.Sales", "PriceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.Models.DataBaseModels.Inventory.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Price");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Account.Account", b =>
                {
                    b.Navigation("SubAccounts");
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Inventory.Inventory", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
