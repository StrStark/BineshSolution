// <auto-generated />
using System;
using DataBaseManager.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataBaseManager.Migrations.Sales
{
    [DbContext(typeof(SalesDbContext))]
    [Migration("20251010104705_InitialCreate_Sales")]
    partial class InitialCreate_Sales
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Shared.Models.DataBaseModels.Inventory.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("InventoryCode")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("InventoryDesc")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("InventoryDesc2")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("InventoryDescBarcode")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("InventoryDescLatin")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("InventoryIsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Sales.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Counterparty")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("DocNumber")
                        .HasColumnType("integer");

                    b.Property<bool>("Request")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("invoice")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Sales.Price", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<long>("Fee")
                        .HasColumnType("bigint");

                    b.Property<long>("Receipt")
                        .HasColumnType("bigint");

                    b.Property<long>("Voucher")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Sales.Sales", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("DeliveredQuantity")
                        .HasColumnType("real");

                    b.Property<float>("Incoming")
                        .HasColumnType("real");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<float>("Outgoing")
                        .HasColumnType("real");

                    b.Property<Guid>("PriceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("RequestNumber")
                        .HasColumnType("integer");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.HasIndex("PriceId")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Inventory.Carpet", b =>
                {
                    b.HasBaseType("Shared.Models.DataBaseModels.Inventory.Product");

                    b.Property<string>("BorderColor")
                        .HasColumnType("text");

                    b.Property<string>("Buyer")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<int>("ColorCount")
                        .HasColumnType("integer");

                    b.Property<string>("ColorPalette")
                        .HasColumnType("text");

                    b.Property<string>("Density")
                        .HasColumnType("text");

                    b.Property<string>("DesignCode")
                        .HasColumnType("text");

                    b.Property<string>("DesignName")
                        .HasColumnType("text");

                    b.Property<string>("DeviceNumber")
                        .HasColumnType("text");

                    b.Property<string>("Grade")
                        .HasColumnType("text");

                    b.Property<string>("ProjectName")
                        .HasColumnType("text");

                    b.Property<string>("Shoulder")
                        .HasColumnType("text");

                    b.Property<string>("Size")
                        .HasColumnType("text");

                    b.Property<string>("WeavePattern")
                        .HasColumnType("text");

                    b.Property<string>("WeaveType")
                        .HasColumnType("text");

                    b.Property<string>("genus")
                        .HasColumnType("text");

                    b.ToTable("Carpets", (string)null);
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Inventory.RawMaterial", b =>
                {
                    b.HasBaseType("Shared.Models.DataBaseModels.Inventory.Product");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeviceUsage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Extra1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Extra2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Extra3")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PackageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Serial")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("RawMaterials", (string)null);
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Inventory.Rug", b =>
                {
                    b.HasBaseType("Shared.Models.DataBaseModels.Inventory.Product");

                    b.Property<string>("Buyer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ColorCount")
                        .HasColumnType("integer");

                    b.Property<string>("Design")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DesignCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WeaveType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Width")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Rugs", (string)null);
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Sales.Sales", b =>
                {
                    b.HasOne("Shared.Models.DataBaseModels.Sales.Invoice", "Invoice")
                        .WithOne()
                        .HasForeignKey("Shared.Models.DataBaseModels.Sales.Sales", "InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.Models.DataBaseModels.Sales.Price", "Price")
                        .WithOne()
                        .HasForeignKey("Shared.Models.DataBaseModels.Sales.Sales", "PriceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shared.Models.DataBaseModels.Inventory.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Price");

                    b.Navigation("Product");
                });
#pragma warning restore 612, 618
        }
    }
}
