// <auto-generated />
using System;
using DataBaseManager.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataBaseManager.Migrations.Inventory
{
    [DbContext(typeof(InventoryDbContext))]
    [Migration("20251021170637_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Shared.Models.DataBaseModels.Account.Account", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Article")
                        .HasColumnType("integer");

                    b.Property<string>("ArticleDescription")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<long>("Credit")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Debit")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DocDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GroupType")
                        .HasColumnType("integer");

                    b.Property<int>("GroupTypeDesc")
                        .HasColumnType("integer");

                    b.Property<bool>("IsLayerOne")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("OperationName")
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("SeriesNumber")
                        .HasColumnType("text");

                    b.Property<long>("SumCredit")
                        .HasColumnType("bigint");

                    b.Property<long>("SumDebit")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("chequeCode")
                        .HasColumnType("text");

                    b.Property<int>("inflection")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ParentId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Inventory.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<bool>("ActiveInReceiptRegistration")
                        .HasColumnType("boolean");

                    b.Property<bool>("ActiveInReports")
                        .HasColumnType("boolean");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("AffectProductionRequestBySalesOrder")
                        .HasColumnType("boolean");

                    b.Property<bool>("AffectStockCalculation")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowNegativeStock")
                        .HasColumnType("boolean");

                    b.Property<bool>("BarcodeEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("Identifiable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMonetary")
                        .HasColumnType("boolean");

                    b.Property<bool>("LimitByAccountAndDocumentType")
                        .HasColumnType("boolean");

                    b.Property<bool>("LimitByMarketer")
                        .HasColumnType("boolean");

                    b.Property<string>("Manager")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("UseAverageOrFIFOFromYearStart")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Inventory.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<float>("Cost")
                        .HasColumnType("real");

                    b.Property<DateTime>("EnteryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExitDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ProductDesc")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ProductDesc2")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ProductDescBarcode")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ProductDescLatin")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("ProductIsActive")
                        .HasColumnType("boolean");

                    b.Property<float>("SellingPrice")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("Products");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Inventory.Carpet", b =>
                {
                    b.HasBaseType("Shared.Models.DataBaseModels.Inventory.Product");

                    b.Property<string>("BorderColor")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Buyer")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Color")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ColorCount")
                        .HasColumnType("integer");

                    b.Property<string>("ColorPalette")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Density")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DesignCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DesignName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DeviceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Grade")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ProjectName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Shoulder")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Size")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("WeavePattern")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("WeaveType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("genus")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.ToTable("Carpets", (string)null);
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Inventory.RawMaterial", b =>
                {
                    b.HasBaseType("Shared.Models.DataBaseModels.Inventory.Product");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Color")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DeviceUsage")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Extra1")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Extra2")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Extra3")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Gender")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Number")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PackageType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ProjectName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Serial")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.ToTable("RawMaterials", (string)null);
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Inventory.Rug", b =>
                {
                    b.HasBaseType("Shared.Models.DataBaseModels.Inventory.Product");

                    b.Property<string>("Buyer")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Color")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ColorCount")
                        .HasColumnType("integer");

                    b.Property<string>("Design")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DesignCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Size")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("WeaveType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Width")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.ToTable("Rugs", (string)null);
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Account.Account", b =>
                {
                    b.HasOne("Shared.Models.DataBaseModels.Account.Account", "Parent")
                        .WithMany("SubAccounts")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Inventory.Inventory", b =>
                {
                    b.HasOne("Shared.Models.DataBaseModels.Account.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Inventory.Product", b =>
                {
                    b.HasOne("Shared.Models.DataBaseModels.Inventory.Inventory", "Inventory")
                        .WithMany("Products")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Account.Account", b =>
                {
                    b.Navigation("SubAccounts");
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Inventory.Inventory", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
