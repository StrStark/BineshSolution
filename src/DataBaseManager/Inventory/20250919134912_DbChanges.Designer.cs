// <auto-generated />
using System;
using DataBaseManager.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataBaseManager.Inventory
{
    [DbContext(typeof(InventoryDbContext))]
    [Migration("20250919134912_DbChanges")]
    partial class DbChanges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Shared.Models.DataBaseModels.Inventory.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("InventoryCode")
                        .HasColumnType("text");

                    b.Property<string>("InventoryDesc")
                        .HasColumnType("text");

                    b.Property<string>("InventoryDesc2")
                        .HasColumnType("text");

                    b.Property<string>("InventoryDescBarcode")
                        .HasColumnType("text");

                    b.Property<string>("InventoryDescLatin")
                        .HasColumnType("text");

                    b.Property<bool>("InventoryIsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Inventory.Carpet", b =>
                {
                    b.HasBaseType("Shared.Models.DataBaseModels.Inventory.Product");

                    b.Property<string>("BorderColor")
                        .HasColumnType("text");

                    b.Property<string>("Buyer")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<int>("ColorCount")
                        .HasColumnType("integer");

                    b.Property<string>("ColorPalette")
                        .HasColumnType("text");

                    b.Property<string>("Density")
                        .HasColumnType("text");

                    b.Property<string>("DesignCode")
                        .HasColumnType("text");

                    b.Property<string>("DesignName")
                        .HasColumnType("text");

                    b.Property<string>("DeviceNumber")
                        .HasColumnType("text");

                    b.Property<string>("Grade")
                        .HasColumnType("text");

                    b.Property<string>("ProjectName")
                        .HasColumnType("text");

                    b.Property<string>("Shoulder")
                        .HasColumnType("text");

                    b.Property<string>("Size")
                        .HasColumnType("text");

                    b.Property<string>("WeavePattern")
                        .HasColumnType("text");

                    b.Property<string>("WeaveType")
                        .HasColumnType("text");

                    b.Property<string>("genus")
                        .HasColumnType("text");

                    b.ToTable("Carpets", (string)null);
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Inventory.RawMaterial", b =>
                {
                    b.HasBaseType("Shared.Models.DataBaseModels.Inventory.Product");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeviceUsage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Extra1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Extra2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Extra3")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PackageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Serial")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("RawMaterials", (string)null);
                });

            modelBuilder.Entity("Shared.Models.DataBaseModels.Inventory.Rug", b =>
                {
                    b.HasBaseType("Shared.Models.DataBaseModels.Inventory.Product");

                    b.Property<string>("Buyer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ColorCount")
                        .HasColumnType("integer");

                    b.Property<string>("Design")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DesignCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WeaveType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Width")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Rugs", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
